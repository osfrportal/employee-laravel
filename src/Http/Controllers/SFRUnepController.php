<?php

namespace Osfrportal\OsfrportalLaravel\Http\Controllers;

use Osfrportal\OsfrportalLaravel\Interfaces\SFRx509Interface;
use Osfrportal\OsfrportalLaravel\Models\SfrPerson;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Auth;
use Osfrportal\OsfrportalLaravel\Enums\CertsTypesEnum;
use Illuminate\Support\Facades\Log;

class SFRUnepController extends Controller
{
    //private SFRx509Interface $interface;
    public function __construct(private SFRx509Interface $interface)
    {
        $this->interface = $interface;
    }
    private function searchPidBySnils(string $snils)
    {
        $person = SfrPerson::where('psnils', $snils)->firstOr(['pid'], function () {
            $person['pid'] = null;
            return $person;
        });
        return $person['pid'];
    }

    public function test()
    {
        $xmldata = "";
        $xmlToCheck = base64_decode($xmldata);
        $this->interface->checkSignXML($xmlToCheck);
        //$this->signXMLUnep();
        //$this->getAllCertsToDB();

        dump('done');
    }

    public function gostHashFile(string $filename, string $disk = 'docsfiles')
    {
        $filedata = Storage::disk($disk)->get($filename);
        if (!empty($filename)) {
            $gostHash = $this->interface->gostHashFile($filedata);
            return $gostHash;
        }
        return null;
    }

    public function gostCheckHashFile(string $filename, string $hash, string $disk = 'docsfiles')
    {
        $filedata = Storage::disk($disk)->get($filename);
        if ((!empty($filename)) && (!empty($hash))) {
            $gostHash = $this->interface->gostCheckHashFile($filedata, $hash);
            return $gostHash;
        }
        return false;
    }


    public function getAllCertsToDB()
    {

        $allCertsCollection = $this->interface->getAllCertsFromStorage();
        $allCertsCollection->each(function ($item) {
            $certDTO = $this->interface->parceCertToDTO($item);
            $pid = $this->searchPidBySnils($certDTO->Snils);
            //dump($person, $certDTO->Snils);
            $this->interface->saveCertToDB($certDTO, $pid);
        });
        //TODO: добавить логгирование

    }

    public function signXMLUnep(string $xmlToSign, int $unepCertID)
    {
        return $this->interface->signXML(base64_decode($xmlToSign), CertsTypesEnum::UNEP(), $unepCertID);
    }
}
